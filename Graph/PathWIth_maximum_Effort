class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        row,col=len(heights),len(heights[0])
        minheap=[[0,0,0]]#[diff,r,c]
        visited=set()
        directions=[[0,1],[0,-1],[1,0],[-1,0]]
        while minheap:
            diff,r,c=heapq.heappop(minheap)
            if (r,c) in visited:
                continue 
            visited.add((r,c))
            if (r,c)==(row-1,col-1):
                return diff 
            for dr,dc in directions:
                nr,nc=r+dr,c+dc 
                if nr<0 or nc<0 or nr==row or nc==col or (nr,nc) in visited:
                    continue 
                newdiff=max(diff,abs(heights[r][c]-heights[nr][nc]))
                heapq.heappush(minheap,[newdiff,nr,nc])
            
