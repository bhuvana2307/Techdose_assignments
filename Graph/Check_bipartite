class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        # odd=1 ,even=-1 like they are two independent one 
        odd=[0]*len(graph)

        def bfs(i):# level order traversal 
            if odd[i]:# No need to proceed once again, if it is already visited
                return True 
            q=deque([i])
            odd[i]= -1 
            while q:
                i=q.popleft()
                for nei in graph[i]:
                    if odd[i]==odd[nei]:
                        return False 
                    elif not odd[nei]:
                        q.append(nei)
                        odd[nei]= (-1*odd[i]) #changing the value ,so that no adj of main one be same as that 
            return True 
        
        for i in range(len(graph)):
            if not bfs(i):
                return False 
        return True
